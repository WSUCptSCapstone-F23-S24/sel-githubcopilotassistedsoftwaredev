Var: iorek of type int [line: 2]
Sibling: 1  Func: dog returns type int [line: 4]
.   Child: 0  Parm: b of type bool [line: 4]
.   Sibling: 1  Parm: c of type char [line: 4]
.   Sibling: 2  Parm: d of type char [line: 4]
.   Child: 1  Compound [line: 5]
.   .   Child: 0  Var: x of type int [line: 6]
.   .   .   Child: 0  Const of type int: 666 [line: 6]
.   .   Sibling: 1  Var: w of type int [line: 6]
.   .   .   Child: 0  Const of type int: 777 [line: 6]
.   .   Child: 1  For [line: 8]
.   .   .   Child: 0  Var: y of type int [line: 8]
.   .   .   Child: 1  Range [line: 8]
.   .   .   .   Child: 0  Const of type int: 103 [line: 8]
.   .   .   .   Child: 1  Const of type int: 107 [line: 8]
.   .   .   Child: 2  Assign: = [line: 8]
.   .   .   .   Child: 0  Id: z [line: 8]
.   .   .   .   Child: 1  Const of type int: 900 [line: 8]
.   .   Sibling: 1  For [line: 9]
.   .   .   Child: 0  Var: y of type int [line: 9]
.   .   .   Child: 1  Range [line: 9]
.   .   .   .   Child: 0  Const of type int: 217 [line: 9]
.   .   .   .   Child: 1  Const of type int: 13 [line: 9]
.   .   .   .   Child: 2  Op: CHSIGN [line: 9]
.   .   .   .   .   Child: 0  Const of type int: 63 [line: 9]
.   .   .   Child: 2  Assign: = [line: 9]
.   .   .   .   Child: 0  Id: z [line: 9]
.   .   .   .   Child: 1  Id: x [line: 9]
.   .   Sibling: 2  For [line: 10]
.   .   .   Child: 0  Var: lyra of type int [line: 10]
.   .   .   Child: 1  Range [line: 10]
.   .   .   .   Child: 0  Op: * [line: 10]
.   .   .   .   .   Child: 0  Const of type int: 3 [line: 10]
.   .   .   .   .   Child: 1  Id: x [line: 10]
.   .   .   .   Child: 1  Op: + [line: 10]
.   .   .   .   .   Child: 0  Id: w [line: 10]
.   .   .   .   .   Child: 1  Const of type int: 13 [line: 10]
.   .   .   .   Child: 2  Op: * [line: 10]
.   .   .   .   .   Child: 0  Id: x [line: 10]
.   .   .   .   .   Child: 1  Id: w [line: 10]
.   .   .   Child: 2  Compound [line: 10]
.   .   .   .   Child: 0  Var: lyra of type int [line: 11]
.   .   .   .   Child: 1  Assign: = [line: 12]
.   .   .   .   .   Child: 0  Id: lyra [line: 12]
.   .   .   .   .   Child: 1  Id: iorek [line: 12]
.   .   Sibling: 3  While [line: 15]
.   .   .   Child: 0  Op: > [line: 15]
.   .   .   .   Child: 0  Id: x [line: 15]
.   .   .   .   Child: 1  Op: + [line: 15]
.   .   .   .   .   Child: 0  Id: y [line: 15]
.   .   .   .   .   Child: 1  Id: z [line: 15]
.   .   .   Child: 1  Assign: = [line: 15]
.   .   .   .   Child: 0  Id: x [line: 15]
.   .   .   .   Child: 1  Const of type int: 6031 [line: 15]
.   .   Sibling: 4  While [line: 16]
.   .   .   Child: 0  Op: > [line: 16]
.   .   .   .   Child: 0  Id: x [line: 16]
.   .   .   .   Child: 1  Op: + [line: 16]
.   .   .   .   .   Child: 0  Id: y [line: 16]
.   .   .   .   .   Child: 1  Id: z [line: 16]
.   .   .   Child: 1  Compound [line: 16]
.   .   .   .   Child: 0  Var: x of type int [line: 17]
.   .   .   .   Sibling: 1  Var: y of type int [line: 17]
.   .   .   .   Sibling: 2  Var: z of type int [line: 17]
.   .   .   .   Child: 1  Assign: = [line: 18]
.   .   .   .   .   Child: 0  Id: x [line: 18]
.   .   .   .   .   Child: 1  Const of type int: 6031 [line: 18]
.   .   Sibling: 5  While [line: 20]
.   .   .   Child: 0  Id: b [line: 20]
.   .   .   Child: 1  While [line: 20]
.   .   .   .   Child: 0  Id: b [line: 20]
