Var: zev is array of type char [line: 1]
.   Child: 0  Const is array of type char: "corgis" [line: 1]
Sibling: 1  Var: x of type int [line: 2]
.   Child: 0  Const of type int: 42 [line: 2]
Sibling: 2  Var: y of type int [line: 2]
.   Child: 0  Const of type int: 666 [line: 2]
Sibling: 3  Var: yurt is array of type char [line: 3]
Sibling: 4  Func: max returns type int [line: 7]
.   Child: 0  Parm: a of type int [line: 7]
.   Sibling: 1  Parm: b of type int [line: 7]
.   Child: 1  If [line: 7]
.   .   Child: 0  Op: > [line: 7]
.   .   .   Child: 0  Id: a [line: 7]
.   .   .   Child: 1  Id: b [line: 7]
.   .   Child: 1  Return [line: 7]
.   .   .   Child: 0  Id: a [line: 7]
.   .   Child: 2  Return [line: 7]
.   .   .   Child: 0  Id: b [line: 7]
Sibling: 5  Func: max3 returns type int [line: 11]
.   Child: 0  Parm: a of type int [line: 11]
.   Sibling: 1  Parm: b of type int [line: 11]
.   Sibling: 2  Parm: c of type int [line: 11]
.   Child: 1  Return [line: 11]
.   .   Child: 0  Op: :>: [line: 11]
.   .   .   Child: 0  Op: :>: [line: 11]
.   .   .   .   Child: 0  Id: a [line: 11]
.   .   .   .   Child: 1  Id: b [line: 11]
.   .   .   Child: 1  Id: c [line: 11]
Sibling: 6  Func: ant returns type int [line: 14]
.   Child: 0  Parm: bat of type int [line: 14]
.   Sibling: 1  Parm: cat is array of type int [line: 14]
.   Sibling: 2  Parm: dog of type bool [line: 14]
.   Sibling: 3  Parm: elk of type bool [line: 14]
.   Sibling: 4  Parm: fox of type int [line: 14]
.   Sibling: 5  Parm: gnu of type char [line: 14]
.   Child: 1  Compound [line: 15]
.   .   Child: 0  Var: goat of type int [line: 16]
.   .   Sibling: 1  Var: hog is array of type int [line: 16]
.   .   Child: 1  Assign: = [line: 18]
.   .   .   Child: 0  Id: gnu [line: 18]
.   .   .   Child: 1  Const of type char: 'W' [line: 18]
.   .   Sibling: 1  Assign: = [line: 19]
.   .   .   Child: 0  Id: goat [line: 19]
.   .   .   Child: 1  Assign: = [line: 19]
.   .   .   .   Child: 0  Op: [ [line: 19]
.   .   .   .   .   Child: 0  Id: hog [line: 19]
.   .   .   .   .   Child: 1  Const of type int: 2 [line: 19]
.   .   .   .   Child: 1  Op: * [line: 19]
.   .   .   .   .   Child: 0  Const of type int: 3 [line: 19]
.   .   .   .   .   Child: 1  Op: SIZEOF [line: 19]
.   .   .   .   .   .   Child: 0  Id: cat [line: 19]
.   .   Sibling: 2  If [line: 20]
.   .   .   Child: 0  Op: OR [line: 20]
.   .   .   .   Child: 0  Op: AND [line: 20]
.   .   .   .   .   Child: 0  Id: dog [line: 20]
.   .   .   .   .   Child: 1  Id: elk [line: 20]
.   .   .   .   Child: 1  Op: > [line: 20]
.   .   .   .   .   Child: 0  Id: bat [line: 20]
.   .   .   .   .   Child: 1  Op: [ [line: 20]
.   .   .   .   .   .   Child: 0  Id: cat [line: 20]
.   .   .   .   .   .   Child: 1  Const of type int: 3 [line: 20]
.   .   .   Child: 1  Assign: = [line: 20]
.   .   .   .   Child: 0  Id: dog [line: 20]
.   .   .   .   Child: 1  Op: NOT [line: 20]
.   .   .   .   .   Child: 0  Id: dog [line: 20]
.   .   .   Child: 2  Assign: ++ [line: 21]
.   .   .   .   Child: 0  Id: fox [line: 21]
.   .   Sibling: 3  If [line: 22]
.   .   .   Child: 0  Op: <= [line: 22]
.   .   .   .   Child: 0  Id: bat [line: 22]
.   .   .   .   Child: 1  Id: fox [line: 22]
.   .   .   Child: 1  Compound [line: 22]
.   .   .   .   Child: 1  While [line: 23]
.   .   .   .   .   Child: 0  Id: dog [line: 23]
.   .   .   .   .   Child: 1  Compound [line: 23]
.   .   .   .   .   .   Child: 0  Var: hog of type int [line: 24]
.   .   .   .   .   .   Child: 1  Assign: = [line: 26]
.   .   .   .   .   .   .   Child: 0  Id: hog [line: 26]
.   .   .   .   .   .   .   Child: 1  Id: fox [line: 26]
.   .   .   .   .   .   Sibling: 1  Assign: = [line: 27]
.   .   .   .   .   .   .   Child: 0  Id: dog [line: 27]
.   .   .   .   .   .   .   Child: 1  Op: > [line: 27]
.   .   .   .   .   .   .   .   Child: 0  Call: fred [line: 27]
.   .   .   .   .   .   .   .   .   Child: 0  Assign: ++ [line: 27]
.   .   .   .   .   .   .   .   .   .   Child: 0  Id: fox [line: 27]
.   .   .   .   .   .   .   .   .   Sibling: 1  Id: cat [line: 27]
.   .   .   .   .   .   .   .   Child: 1  Const of type int: 666 [line: 27]
.   .   .   .   .   .   Sibling: 2  If [line: 28]
.   .   .   .   .   .   .   Child: 0  Op: > [line: 28]
.   .   .   .   .   .   .   .   Child: 0  Id: hog [line: 28]
.   .   .   .   .   .   .   .   Child: 1  Id: bat [line: 28]
.   .   .   .   .   .   .   Child: 1  Break [line: 28]
.   .   .   .   .   .   .   Child: 2  If [line: 29]
.   .   .   .   .   .   .   .   Child: 0  Op: != [line: 29]
.   .   .   .   .   .   .   .   .   Child: 0  Id: fox [line: 29]
.   .   .   .   .   .   .   .   .   Child: 1  Const of type int: 0 [line: 29]
.   .   .   .   .   .   .   .   Child: 1  Assign: += [line: 29]
.   .   .   .   .   .   .   .   .   Child: 0  Id: fox [line: 29]
.   .   .   .   .   .   .   .   .   Child: 1  Const of type int: 7 [line: 29]
.   .   Sibling: 4  For [line: 33]
.   .   .   Child: 0  Var: i of type int [line: 33]
.   .   .   Child: 1  Range [line: 33]
.   .   .   .   Child: 0  Const of type int: 1 [line: 33]
.   .   .   .   Child: 1  Const of type int: 10 [line: 33]
.   .   .   .   Child: 2  Const of type int: 3 [line: 33]
.   .   .   Child: 2  Compound [line: 33]
.   .   .   .   Child: 1  If [line: 34]
.   .   .   .   .   Child: 0  Op: == [line: 34]
.   .   .   .   .   .   Child: 0  Id: x [line: 34]
.   .   .   .   .   .   Child: 1  Const of type int: 1 [line: 34]
.   .   .   .   .   Child: 1  Assign: = [line: 34]
.   .   .   .   .   .   Child: 0  Op: [ [line: 34]
.   .   .   .   .   .   .   Child: 0  Id: cat [line: 34]
.   .   .   .   .   .   .   Child: 1  Id: i [line: 34]
.   .   .   .   .   .   Child: 1  Id: bat [line: 34]
.   .   .   .   .   Child: 2  If [line: 35]
.   .   .   .   .   .   Child: 0  Op: == [line: 35]
.   .   .   .   .   .   .   Child: 0  Id: x [line: 35]
.   .   .   .   .   .   .   Child: 1  Const of type int: 2 [line: 35]
.   .   .   .   .   .   Child: 1  Assign: = [line: 35]
.   .   .   .   .   .   .   Child: 0  Op: [ [line: 35]
.   .   .   .   .   .   .   .   Child: 0  Id: cat [line: 35]
.   .   .   .   .   .   .   .   Child: 1  Id: i [line: 35]
.   .   .   .   .   .   .   Child: 1  Op: % [line: 35]
.   .   .   .   .   .   .   .   Child: 0  Id: bat [line: 35]
.   .   .   .   .   .   .   .   Child: 1  Const of type int: 17 [line: 35]
.   .   .   .   .   .   Child: 2  If [line: 36]
.   .   .   .   .   .   .   Child: 0  Op: == [line: 36]
.   .   .   .   .   .   .   .   Child: 0  Id: x [line: 36]
.   .   .   .   .   .   .   .   Child: 1  Const of type int: 3 [line: 36]
.   .   .   .   .   .   .   Child: 1  Assign: = [line: 36]
.   .   .   .   .   .   .   .   Child: 0  Op: [ [line: 36]
.   .   .   .   .   .   .   .   .   Child: 0  Id: cat [line: 36]
.   .   .   .   .   .   .   .   .   Child: 1  Id: i [line: 36]
.   .   .   .   .   .   .   .   Child: 1  Const of type int: 78 [line: 36]
.   .   .   .   .   .   .   Child: 2  Assign: ++ [line: 37]
.   .   .   .   .   .   .   .   Child: 0  Id: x [line: 37]
.   .   Sibling: 5  While [line: 40]
.   .   .   Child: 0  Const of type bool: true [line: 40]
.   .   .   Child: 1  If [line: 40]
.   .   .   .   Child: 0  Op: > [line: 40]
.   .   .   .   .   Child: 0  Id: x [line: 40]
.   .   .   .   .   Child: 1  Const of type int: 333 [line: 40]
.   .   .   .   Child: 1  Break [line: 40]
.   .   .   .   Child: 2  Assign: ++ [line: 40]
.   .   .   .   .   Child: 0  Id: x [line: 40]
.   .   Sibling: 6  Assign: = [line: 42]
.   .   .   Child: 0  Id: yurt [line: 42]
.   .   .   Child: 1  Id: zev [line: 42]
.   .   Sibling: 7  Assign: = [line: 43]
.   .   .   Child: 0  Op: [ [line: 43]
.   .   .   .   Child: 0  Id: yurt [line: 43]
.   .   .   .   Child: 1  Const of type int: 3 [line: 43]
.   .   .   Child: 1  Op: [ [line: 43]
.   .   .   .   Child: 0  Id: zev [line: 43]
.   .   .   .   Child: 1  Op: ? [line: 43]
.   .   .   .   .   Child: 0  Op: SIZEOF [line: 43]
.   .   .   .   .   .   Child: 0  Id: zev [line: 43]
.   .   Sibling: 8  Return [line: 45]
.   .   .   Child: 0  Op: / [line: 45]
.   .   .   .   Child: 0  Op: + [line: 45]
.   .   .   .   .   Child: 0  Id: fox [line: 45]
.   .   .   .   .   Child: 1  Op: * [line: 45]
.   .   .   .   .   .   Child: 0  Id: bat [line: 45]
.   .   .   .   .   .   Child: 1  Op: [ [line: 45]
.   .   .   .   .   .   .   Child: 0  Id: cat [line: 45]
.   .   .   .   .   .   .   Child: 1  Id: bat [line: 45]
.   .   .   .   Child: 1  Op: CHSIGN [line: 45]
.   .   .   .   .   Child: 0  Id: fox [line: 45]
